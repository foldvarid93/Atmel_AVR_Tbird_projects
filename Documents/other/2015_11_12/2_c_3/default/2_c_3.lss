
2_c_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002f  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022f  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000177  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d7  00000000  00000000  000005ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ed  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000043  00000000  00000000  000008f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  b6:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <init>:
void hetseg(unsigned char ki);

void init()
	{
		
		DDRG=	0;
  be:	10 92 64 00 	sts	0x0064, r1
		DDRA=	0b11111111;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
		DDRC=	0x78;
  c6:	88 e7       	ldi	r24, 0x78	; 120
  c8:	84 bb       	out	0x14, r24	; 20
	}
  ca:	08 95       	ret

000000cc <main>:

int main()
{	
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	2a 97       	sbiw	r28, 0x0a	; 10
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
	unsigned char i=0;
	unsigned char tomb[10]={66,9,10,12,17,18,20,33,34,36};
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x26>
void hetseg(unsigned char ki);

void init()
	{
		
		DDRG=	0;
  fa:	10 92 64 00 	sts	0x0064, r1
		DDRA=	0b11111111;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bb       	out	0x1a, r24	; 26
		DDRC=	0x78;
 102:	88 e7       	ldi	r24, 0x78	; 120
 104:	84 bb       	out	0x14, r24	; 20
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	48 e0       	ldi	r20, 0x08	; 8
 10a:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10c:	90 e2       	ldi	r25, 0x20	; 32
 10e:	e9 2e       	mov	r14, r25
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	f9 2e       	mov	r15, r25
	{
		if(sor==64)	sor=8;
		PORTC=sor;
		_delay_ms(5);
		vissza=((~PINC&0b00000111)|sor);
		if(vissza==tomb[i])
 114:	8e 01       	movw	r16, r28
 116:	0f 5f       	subi	r16, 0xFF	; 255
 118:	1f 4f       	sbci	r17, 0xFF	; 255
 11a:	a0 e4       	ldi	r26, 0x40	; 64
 11c:	bc e9       	ldi	r27, 0x9C	; 156
	init();
	int sor=0b00001000,vissza=0,elozo=0;
		
	while(1)
	{
		if(sor==64)	sor=8;
 11e:	40 34       	cpi	r20, 0x40	; 64
 120:	51 05       	cpc	r21, r1
 122:	11 f4       	brne	.+4      	; 0x128 <main+0x5c>
 124:	48 e0       	ldi	r20, 0x08	; 8
 126:	50 e0       	ldi	r21, 0x00	; 0
		PORTC=sor;
 128:	45 bb       	out	0x15, r20	; 21
 12a:	c7 01       	movw	r24, r14
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x60>
		_delay_ms(5);
		vissza=((~PINC&0b00000111)|sor);
 130:	83 b3       	in	r24, 0x13	; 19
		if(vissza==tomb[i])
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	80 95       	com	r24
 136:	90 95       	com	r25
 138:	87 70       	andi	r24, 0x07	; 7
 13a:	90 70       	andi	r25, 0x00	; 0
 13c:	84 2b       	or	r24, r20
 13e:	95 2b       	or	r25, r21
 140:	f8 01       	movw	r30, r16
 142:	e6 0f       	add	r30, r22
 144:	f1 1d       	adc	r31, r1
 146:	20 81       	ld	r18, Z
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	82 17       	cp	r24, r18
 14c:	93 07       	cpc	r25, r19
 14e:	31 f4       	brne	.+12     	; 0x15c <main+0x90>
return 0;
}

void hetseg(unsigned char ki)
{
	PORTA=0b10110000|ki;
 150:	86 2f       	mov	r24, r22
 152:	80 6b       	ori	r24, 0xB0	; 176
 154:	8b bb       	out	0x1b, r24	; 27
 156:	cd 01       	movw	r24, r26
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x8c>
		if(vissza==tomb[i])
			{
				hetseg(i);
			}
			
			i++;
 15c:	6f 5f       	subi	r22, 0xFF	; 255
			if(i>=10) i=0;
 15e:	6a 30       	cpi	r22, 0x0A	; 10
 160:	08 f0       	brcs	.+2      	; 0x164 <main+0x98>
 162:	60 e0       	ldi	r22, 0x00	; 0
			sor<<=1;
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	da cf       	rjmp	.-76     	; 0x11e <main+0x52>

0000016a <hetseg>:
return 0;
}

void hetseg(unsigned char ki)
{
	PORTA=0b10110000|ki;
 16a:	80 6b       	ori	r24, 0xB0	; 176
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <hetseg+0x8>
	_delay_ms(del);

}
 176:	08 95       	ret

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
