
2_c_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000047  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c6  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000134  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bc  00000000  00000000  000004cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000eb  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  000007d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  b6:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:
#include <stdlib.h>


void port_init()
	{
		DDRB=0xF0;
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	87 bb       	out	0x17, r24	; 23
		DDRD=0xF0;
  c2:	81 bb       	out	0x11, r24	; 17
		DDRG=0;
  c4:	10 92 64 00 	sts	0x0064, r1
	}
  c8:	08 95       	ret

000000ca <konstans>:

void konstans(led)
{

		
		PORTD=led;
  ca:	82 bb       	out	0x12, r24	; 18
		PORTB=led;
  cc:	88 bb       	out	0x18, r24	; 24
}
  ce:	08 95       	ret

000000d0 <temp>:

void temp(tmp)
{
	PORTD=led;
  d0:	8d e6       	ldi	r24, 0x6D	; 109
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	82 bb       	out	0x12, r24	; 18
	PORTB=led;
  d6:	88 bb       	out	0x18, r24	; 24



}
  d8:	08 95       	ret

000000da <led>:

void led()
{
unsigned char tmp=1;
unsigned char led=128;
konstans(led);
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 65 00 	call	0xca	; 0xca <konstans>
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	20 e4       	ldi	r18, 0x40	; 64
  e8:	3c e9       	ldi	r19, 0x9C	; 156
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <led+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d9 f7       	brne	.-10     	; 0xea <led+0x10>
_delay_ms(100);
temp(tmp);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 68 00 	call	0xd0	; 0xd0 <temp>




}
  fc:	08 95       	ret

000000fe <main>:
#include <stdlib.h>


void port_init()
	{
		DDRB=0xF0;
  fe:	80 ef       	ldi	r24, 0xF0	; 240
 100:	87 bb       	out	0x17, r24	; 23
		DDRD=0xF0;
 102:	81 bb       	out	0x11, r24	; 17
		DDRG=0;
 104:	10 92 64 00 	sts	0x0064, r1

int main()
	{
	
	port_init();
	led();
 108:	0e 94 6d 00 	call	0xda	; 0xda <led>


	}
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
