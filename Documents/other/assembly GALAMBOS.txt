2. csütörtök:

.include "m128def.inc"
.def a=r16
.def b=r17
.def c=r18
.def d=r19
.def e=r20
// stack inicializálása
.macro stack
ldi		a,	high(ramend)
out		sph,	a
ldi		a,	low(ramend)
out		spl,	a
.endmacro

.macro port_init
ldi		a,		0
sts		DDRG,	a //Gport bemenet
ldi		a,		0xf0
out		DDRD,	a
out		DDRB,	a
.endmacro

.macro ledout
out		PORTD,	e
swap	e
out		PORTB,	e
swap	e
.endmacro

.org 0x00

rjmp	start

.org 0x100

start:
ldi		d,		140
ldi		c,		22
eor		e,		e
stack
port_init
lds		b,		PING
cpi		b,		1
breq	elso
cpi		b,		2
breq	masod
cpi		b,		4
breq	har
cpi		b,		8
breq	negyed
rjmp	start

elso:
add		d,		c
mov		e,		d
ledout
rjmp	start

masod:
sub		d,		c
mov 	e,		d
ledout
rjmp	start

har:
sub		d,		c
breq	egesz
brmi	tort
inc		e
ledout
rjmp	har

egesz:
rjmp	start

tort:
add		d,		c
rjmp	start

negyed:
clc
eor		e,		e
ldi		e,		3
lep:
ledout
rol		e
rol		e
brcs	negyed
rjmp	lep


3.csütörtök zh:

.include "m128def.inc"

.def	a=r16
.def	b=r17
.def	c=r18
.def	d=r19
.def	e=r20


.org	0x00
rjmp	start
.org	0x100

.macro stack_init
ldi		a,		high(ramend)
out		sph,	a
ldi		a,		low(ramend)
out		spl,	a
.endmacro

.macro	port_init
ldi		a,		0
sts		DDRG,	a
ldi		a,		0b11110000
out		DDRD,	a
out		DDRB,	a
.endmacro

start:
stack_init
port_init
rjmp masod
elso:
ldi		a,	119
ldi		c,	0
ciklus:
mov		b,	a
sbr		b,	1
cp		b,	a
brne	paros
inc		a
rjmp	ciklus
paros:
push	a
inc		a
inc		c
cpi		c,	50
breq	vege
rjmp	ciklus
vege:
rjmp	masod

masod:
ldi		a,	160
ldi		b,	45
ldi		c,	8
sub		a,	b
osz:
sub		a,	c
brmi	marad
rjmp	osz
marad:
add		a,	c
call	kitesz
rjmp	start

kitesz:
out		PORTD,	a
swap	a
out		PORTB,	a
swap	a
ret


3. csütörtök:

.include "m128def.inc"

.def a=r16
.def b=r17
.def c=r18
.def d=r19
.def e=r20
.def f=r21

.macro stack_init
ldi		a,		high(ramend)
out		sph,	a
ldi		a,		low(ramend)
out		spl,	a
.endmacro

.macro port_init
ldi		a,		0
sts		DDRG,	a
ldi		a,		0xF0
out		DDRD,	a
out		DDRB,	a
ldi		a,		0b10000000
out		DDRC,	a
ldi		a,		0b00001100
out		DDRE,	a
.endmacro

.org	0x00
rjmp	start
.org	0x100

start:
stack_init
port_init
eor		a,	a
lds		a,	PING
cpi		a,	1
breq	g0
cpi		a,	2
breq	g1
cpi		a,	4
breq	g2
cpi		a,	8
breq	g3
cpi		a,	16
breq	g4
main:
call	kitesz
eor		a,	a
eor		b,	b
main2:
call	RGB
rjmp	start

g0:
ldi		a,		255
rjmp	main

g1:
ldi		b,		10
ldi		c,		5
mul		b,		b
mov		a,		r0
add		a,		c
rjmp	main

g2:
clc
ldi		a,	1
bal:
call	delay
call	kitesz
rol		a
brcs	g2
rjmp	bal

g3:
clc
ldi		a,	128
jobb:
call	delay
call	kitesz
ror		a
brcs	g2
rjmp	jobb

g4:
ldi		a,	0b10000000
ldi		b,	0b00001100
rjmp	main2

RGB:
out		PORTC,	a
out		PORTE,	b
ret

kitesz:
out		PORTD,	a
swap	a
out		PORTB,	a
swap	a
ret

delay:
ldi		d,		8
d1:
ldi		e,		255
d2:
ldi		f,		255
d3:
dec		f
brne	d3
dec		e
brne	d2
dec 	d
brne	d1
ret
