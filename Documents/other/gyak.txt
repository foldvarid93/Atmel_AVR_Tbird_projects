#include <avr/io.h>
#include <avr/interrupt.h>
#define  F_CPU (8000000UL)


volatile unsigned int cnt=0,leds=1,rgb=0;
unsigned char ready=0,readyup=0;

void seg_out(unsigned int cnt);
void led_out(unsigned int leds);
void rgb_out(unsigned int rgb);

void init()
{
	DDRA=255;
	DDRD=0xF0;
	DDRB=0xF0;
	DDRC=128;
	DDRE=12;
	DDRG=0;

	TIMSK=0b11000011;

	TCCR0=0b00000111;
	TCCR2=0b00000001;
	OCR2=128;
	sei();
}


int main()
{
	unsigned char button=0,pressed=0;

	init();
	while(1)
	{
		button=PING;
		
		if(button==0) pressed=0;

		if((button==1) && (pressed==0))
			{	
				pressed=1;
				OCR2-=20;
				if(OCR2<=8) OCR2=28;
				ready=0;

			} 
		if((button==2) && (pressed==0))
			{	
				pressed=1;
				OCR2+=20;
				if(OCR2>=248) OCR2=228;
				ready=0;

			} 
		if(button==4)
			{
				ready=1;

			}
		seg_out(cnt);
		led_out(leds);
		rgb_out(rgb);
	}





}



ISR(TIMER0_OVF_vect)
{
	
	cnt++;
	leds<<=1;
	if(cnt==10000) cnt=0;
	if(leds==256)   leds=1;

	//RGB áttûnés
	if((ready==1) && (readyup==0))
	{
		OCR2--;
			if(OCR2==1) readyup=1;
				
	}
	if(readyup==1)OCR2++;
	if(OCR2==254) readyup=0;
	
	

	

}


ISR(TIMER0_COMP_vect){}



ISR(TIMER2_OVF_vect)
{
	rgb=0b10001100;

}



ISR(TIMER2_COMP_vect)
{
	rgb=0;


}




void seg_out(unsigned int cnt)
{
	int tmp;
	tmp=cnt;

	//1.digit
	PORTA=(0b10000000 | (tmp%10));
	
	//1.digit
	PORTA=(0b10010000 | ((tmp/10)%10));

	//1.digit
	PORTA=(0b10100000 | ((tmp/100)%10));

	//1.digit
	PORTA=(0b10110000 | (tmp/1000));


}

void led_out(unsigned int leds)
{
	PORTD=leds;
	PORTB=(leds<<4);



}

void rgb_out(unsigned int rgb)
{
	PORTC=rgb;
	PORTE=rgb;
	

}




















